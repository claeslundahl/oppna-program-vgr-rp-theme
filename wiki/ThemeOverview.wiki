#summary The theme for Regionportalen contains the customization of the look and feel of the Liferay portal and contains css, images, markup and javascript.

=Theme Overview=

The theme for Regionportalen contains the customization of the look and feel of the Liferay portal and contains css, images, markup and javascript.

==Maven and the Reference Architecture==
The project utilizes Liferay's Maven support for building, and requires that the Liferay Maven support project is installed (1). In addition, the project is customized from the initial project structure generated by the Liferay Maven plugin to a structure that is aligned with the Reference Architecture at VGR.

The project is built by executing the mvn clean install command.

==No _diffs folder==
Since Maven is used instead of the ant-based Liferay-plugins-SDK, the theme project differs from a typical Liferay theme project. The most significant difference being that there is no _diffs folder in webapp. The folders and files in webapp are the files that overrides the basic Liferay theme files. At build time, files are pulled from portal-web and merged with the files from the webapp folder.

==Theme structure==
The project contains css, htc, images, javascript and velocity templates:

http://oppna-program-vgr-rp-theme.googlecode.com/svn/wiki/project-structure.png

==CSS==
The main styling for the theme is placed in custom.css. Liferay automatically includes custom.css for a theme.

http://oppna-program-vgr-rp-theme.googlecode.com/svn/wiki/css-files.png

The custom.css file is structured in main sections and sub-sections. The structure is defined in top of the file together with color definitions and other comments. Each main section starts with an equal sign (“=”). Since css typically does not contain equal signs, one can easily jump through the section by searching for “=”.

http://oppna-program-vgr-rp-theme.googlecode.com/svn/wiki/custom-css-structure.png

At the very beginning of custom.css, the webfont Ubuntu is loaded through Googles Font API.

Styles in each rule are sorted alphabetically. For example, definition of background goes before margin. Different developers advocate different methods for organizing css. Some argue that styling should be grouped according to attribute type. The alphabetical approach was chosen in order to simplify css development for non-css-savvy developers and to secure that the css is kept structured on a longer term.

In addition to this, ie7.css contains styles for IE7 and below. The file is added through templates/portal_normal.vm with conditional commenting.

Finally, there is a css file called console-core.css. This file contains styling of the YUI-console, which is a javascript debug console. The file is only loaded on the page when debugging is set to true in templates/init_custom.vm.

==HTC==
The htc folder contains HTML-component files (htc). The theme uses the [http://css3pie.com/ css3pie] - a utility for Internet Explorer (currently versions 6-8) which gives it the ability to parse and render a number of the most useful CSS3 properties.

Thus, css3pie allows us to use css3 rounded corners in older versions of IE. An example of this are the rounded corners for the portlet borders, which with css3 are styled as follows:

'.portlet {
background-color: #fff;
	border: 1px solid #e1ebf3;
	-moz-border-radius: 4px;
	-webkit-border-radius: 4px;
	border-radius: 4px;
	/* Needs an absolute path */
	behavior: url(/regionportalen-theme/htc/css3pie.htc);
	margin: 0 0 10px;
	padding: 0;
	/* Position relative needed for css3pie.htc to work properly */
	position: relative;
	text-align: left;
}'

First, browser-prefixed border radius is applied. Next, css3 standard border radius is applied. Finally, the css3pie behavior is specified. Note that the reference to css3pie.htc file needs to be absolute. Also, note that position needs to be set to relative in order for css3pie to work properly.

==Images==
Images are placed in the images folder.

==Javascript==
The main javascript features of the theme are placed in a separate AUI-module, vgr-novus-main.js. The module is instantiated in vgr-novus-instance.js. The instance script also contains plain old javascript in order to prevent content flashing before AUI is ready on the page.

http://oppna-program-vgr-rp-theme.googlecode.com/svn/wiki/js-files.png

Finally, there is a debug.js file that activates the YUI debug console if debug is turned on in templates/init_custom.vm.

==Templates==
The templates folder contains velocity templates for the theme.

http://oppna-program-vgr-rp-theme.googlecode.com/svn/wiki/template-files.png

The main template is the portal_normal.vm file. This template contains the overall structure for the page and calls the other templates for rendering.
  * footer.vm contains markup for the footer.
  * navigation.vm contains logic and markup for the navigation bar
  * piwik.vm contains markup and scripting for the web analytics tool Piwik which is used for the portal.

Finally, init_custom.vm includes custom settings and velocity variable definitions that are used by other templates.

==Configurations==
The liferay-look-and-feel.xml in WEB-INF defines two themes: “regionportalen-theme” and “regionportalen-theme-no-hide”. When deployed, two themes are installed in Liferay. Both themes, however, share the same files. The difference between the two themes is whether sidebar toggle (show/hide) is allowed or not.

If sidebar toggle is allowed (as with the case of the theme with id “regionportalen theme”), the global javascript variable vgrGlobal.hideSidbar is defined to true in portal_normal.vm. This variable is used in the vgr-novus-module to activate toggling of the sidebar.

(1) A merged/adapted version of Liferay's Maven support plugin was actually used. The used version is compiled from the Maven support pluging for Liferay 6.0 and Liferay 6.1.